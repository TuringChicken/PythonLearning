import pandas as pd
import numpy as np

# series是一种类似于一维数组的对象，它由一维数组（各种numpy数据类型）以及一组与之相关的数据标签（即索引）组成
# pandas.Series(data, index, dtype, copy)
print(pd.Series([11, 12], index=["北京", "上海"]))
print(pd.Series(np.arange(3, 6)))
print(pd.Series({"北京": 11, "上海": 12, "深圳": 14}))
# Series的字符串表现形式为：索引在左边，值在右边
# 如果没有为数据指定索引，则自动创建一个0到N-1（N为数据的长度）的整数型索引
# 可以通过Series的values和index属性获取其数组表示形式和索引对象
# 与普通numpy数组相比，可以通过索引的方式选取Series中的单个或一组值
obj = pd.Series([4, 7, -5, 3])
print(obj.values)
print(obj.index)
print(obj[2])
obj[1] = 8
print(obj[[0, 1, 3]])
# 与普通Numpy数组相比，可以通过索引的方式选取Series中的单个或一组值
obj2 = pd.Series([4, 2, -5, 3], index=['a', 'b', 'c', 'd'])
print(obj2)
print(obj2['a'])
print(obj2['b'])
print(obj2[['a', 'b', 'd']])
# Series中很重要的一个功能是：它会在算数运算中自动对齐不同索引的数据
obj2 = pd.Series({"Ohio": 35000, "Oregon": 16000, "Texas": 71000, "Utah": 5000})
obj3 = pd.Series({"California": np.nan, "Ohio": 35000, "Oregon": 16000, "Texas": 71000})
print(obj2 + obj3)
obj3.name = 'population'
obj3.index.name = 'state'
print(obj3)
obj.index = ['Bob', "Steve", "Jeff", "Ryan"]
print(obj, '\n')

# DataFrame构造函数
# pandas.DataFrame(data, index, columns, dtype, copy)
# 创建一个空的DataFrame
df = pd.DataFrame()
print(df)
# 从列表创建DataFrame
data = [1, 2, 3, 4]
df = pd.DataFrame(data)
print(df, '\n')
# 从嵌套列表创建DataFrame、并指定数据类型
data = [['Alex', 10], ['Bob', 12], ['Clarke', 13]]
df = pd.DataFrame(data, columns=['Name', 'Age'], dtype=float)
print(df, '\n')
# 由等长列表或numpy数组组成的字典创建DataFrame
# DataFrame结果会自动加上索引（跟Series一样），且全部会被有序排列
data = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'], 'year': [2000, 2001, 2002, 2001, 2002],
        'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}
frame = pd.DataFrame(data)
print(frame, '\n')
# 如果指定了列顺序，则DataFrame的列就会按照指定顺序进行排列
# 跟原Series一样，如果传入的列在数据中找不到，就会产生NAN值
print(pd.DataFrame(data, columns=['year', 'state', 'pop']), '\n')
frame2 = pd.DataFrame(data, columns=['years', 'state', 'pop', 'debt'], index=['one', 'two', 'three', 'four', 'five'])
print(frame2, '\n')
print(frame2.columns, '\n')
# 通过类似字典标记的方式或属性的方式，可以将DataFrame的列获取为一个Series
# 返回的Series拥有原DataFrame相同的索引，且其name属性也已经被相应地设置好了
print(frame2['state'], '\n')
print(frame2['years'], '\n')
# 列可以通过赋值的方式进行修改
frame2['debt'] = 16.5
print(frame2, '\n')
frame2['debt'] = np.arange(5.)  # 这个点表示浮点数
print(frame2, '\n')
# 将列表或数组赋值给某个列时，其长度必须跟DataFrame的长度相匹配
# 如果赋值的是一个Series，就会精确匹配DataFrame的索引，所有空位都将被填上缺失值
val = pd.Series([-1.2, - 1.5, - 1.7], index=['two', 'four', 'five'])
frame2['debt'] = val
print(frame2, '\n')
# 为不存在的列赋值会创建出一个新列
# 关键字del用于删除列
frame2['eastern'] = frame2.state == 'Ohio'
print(frame2, '\n')
del frame2['eastern']
print(frame2.columns, '\n')
# 将嵌套字典（也就是字典的字典）传给DataFrame，它就会被解释为：外层字典的键作为列，内层字典的键则作为行索引
# 也可以对上述结果进行转置
pop = {'Nevada': {2001: 2.4, 2002: 2.9}, 'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6}}
frame3 = pd.DataFrame(pop)
print(frame3, '\n')
print(frame3.T, '\n')
# 如果设置了DataFrame的index和columns的name属性，则这些信息也会被显示出来
frame3.index.name = 'year'
frame3.columns.name = 'state'
print(frame3, '\n')
# 跟series一样，values属性也会以二维ndarray的形式返回DataFrame中的数据
# 如果DataFrame各列的数据类型不同，则数组的数据类型就会选用能兼容所有列的数据类型
print(frame3.values, '\n')
print(frame2.values, '\n')
